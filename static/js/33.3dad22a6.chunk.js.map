{"version":3,"sources":["components/Tooltip.js","components/ActionsPanel.js","components/Actions.js"],"names":["Tooltip","children","message","hold","childProps","handleClick","useCallback","e","stopPropagation","className","content","dangerouslySetInnerHTML","__html","split","map","text","join","arrow","animation","touch","onClick","Timeline","lazy","retry","ActionsPanel","lastViewedLog","isTimelineMode","setIsTimelineMode","showUpdates","date","setDate","dates","setShowUpdates","trail","useMemo","styles","element","index","push","animationDelay","handleTimelineClick","style","opacity","transform","pointerEvents","lastViewedDate","utcToZonedTime","parse","Date","format","getTimeFromMilliseconds","fallback","Actions","useState","useLocalStorage","setNewUpdate","setLastViewedLog","updates","useSWR","API_DOMAIN","fetcher","revalidateOnFocus","data","useEffect","undefined","lastTimestamp","slice","reverse","timestamp","isEqual","prevProps","currProps","equal","memo"],"mappings":"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","file":"static/js/33.3dad22a6.chunk.js","sourcesContent":["import Tippy from '@tippyjs/react';\nimport {useCallback} from 'react';\n\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/animations/shift-away.css';\n\nfunction Tooltip({children, message, hold = false, childProps = {}}) {\n  const handleClick = useCallback((e) => e.stopPropagation(), []);\n\n  return (\n    <Tippy\n      className=\"Tooltip\"\n      content={\n        typeof message === 'string' ? (\n          <p\n            className=\"message\"\n            dangerouslySetInnerHTML={{\n              __html: message\n                .split('\\n')\n                .map((text) => `<div>${text}</div>`)\n                .join(''),\n            }}\n          ></p>\n        ) : (\n          message\n        )\n      }\n      arrow={false}\n      animation=\"shift-away\"\n      touch={hold ? ['hold', 300] : true}\n    >\n      <div onClick={handleClick} {...childProps}>\n        {children}\n      </div>\n    </Tippy>\n  );\n}\n\nexport default Tooltip;\n","import Tooltip from './Tooltip';\n\nimport {retry} from '../utils/commonFunctions';\n\nimport {HistoryIcon} from '@primer/octicons-react';\nimport {format, parse} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport {useMemo, useCallback, lazy, Suspense} from 'react';\n\n\nconst Timeline = lazy(() => retry(() => import('./Timeline')));\n\nconst ActionsPanel = ({\n  lastViewedLog,\n  isTimelineMode,\n  setIsTimelineMode,\n  showUpdates,\n  date,\n  setDate,\n  dates,\n  setShowUpdates,\n}) => {\n  \n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${500 + index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  const getTimeFromMilliseconds = (lastViewedLog) => {\n    const lastViewedDate = utcToZonedTime(\n      parse(lastViewedLog, 'T', new Date()),\n      'Asia/Kolkata'\n    );\n    return format(lastViewedDate, 'dd MMM, p');\n  };\n\n  const handleTimelineClick = useCallback(() => {\n    setIsTimelineMode(true);\n    if (showUpdates) setShowUpdates(!showUpdates);\n  }, [setIsTimelineMode, setShowUpdates, showUpdates]);\n\n  \n\n  return (\n    <div className=\"ActionsPanel\">\n      <div\n        className=\"actions\"\n        style={{\n          opacity: isTimelineMode ? 0 : 1,\n          transform: `perspective(600px) rotateX(${\n            isTimelineMode ? 90 : 0\n          }deg)`,\n          pointerEvents: isTimelineMode ? 'none' : '',\n        }}\n      >\n        <h5 className=\"fadeInUp\" style={trail[0]}>{`${getTimeFromMilliseconds(\n          lastViewedLog\n        )} ${('IST')}`}</h5>\n\n\n        <Tooltip message={'Timeline'} hold>\n          <div\n            className=\"timeline-icon fadeInUp\"\n            onClick={handleTimelineClick}\n            style={trail[2]}\n          >\n            {<HistoryIcon />}\n          </div>\n        </Tooltip>\n      </div>\n\n      {isTimelineMode && (\n        <Suspense fallback={<div />}>\n          <Timeline\n            {...{date, setDate, dates, isTimelineMode, setIsTimelineMode}}\n          />\n        </Suspense>\n      )}\n    </div>\n  );\n};\n\nexport default ActionsPanel;\n","import ActionsPanel from './ActionsPanel';\n\nimport {API_DOMAIN} from '../constants';\nimport {fetcher, retry} from '../utils/commonFunctions';\n\nimport equal from 'fast-deep-equal';\nimport {memo, useState, useEffect, lazy, Suspense} from 'react';\nimport {useLocalStorage} from 'react-use';\nimport useSWR from 'swr';\n\nconst Updates = lazy(() => retry(() => import('./Updates')));\n\nconst Actions = ({date, setDate, dates}) => {\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage('lastViewedLog', 0);\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\n\n  const {data: updates} = useSWR(`${API_DOMAIN}/updatelog/log.json`, fetcher, {\n    revalidateOnFocus: true,\n  });\n\n  useEffect(() => {\n    if (updates !== undefined) {\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n\n  return (\n    <>\n      <ActionsPanel\n        {...{\n          lastViewedLog,\n          isTimelineMode,\n          setIsTimelineMode,\n          showUpdates,\n          date,\n          setDate,\n          dates,\n          setShowUpdates,\n        }}\n      />\n    </>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Actions, isEqual);\n"],"sourceRoot":""}